src/app.ts: 
____________________________________
Old:

const ensureDirExists = async (dir: string) => { ... }, 

const getImagesFromDirectory = async (dir: string) => { ... }

____________________________________
New: 

const ensureDirExists = async (dir: string): Promise<void> => { ... }

const getImagesFromDirectory = async (dir: string): Promise<{ filename: string, path: string }[]> => { ... }

____________________________________
Old: 
app.get('/', (req: Request, res: Response) => { ... })

app.get('/api/gallery', async (req, res) => { ... })

app.post('/upload', multerConfig.single('image'), (req: Request, res: Response) => { ... })

app.post('/api/resize', multerConfig.single('image'), async (req: Request, res: Response) => { ... })

app.get('/resized/:filename', async (req: Request, res: Response) => { ... })

app.use((err: Error, req: Request, res: Response, next: NextFunction) => { ... })

app.listen(PORT, () => { ... })

____________________________________
New:

app.get('/', (req: Request, res: Response): void => { ... })

app.get('/api/gallery', async (req: Request, res: Response): Promise<void> => { ... })

app.post('/upload', multerConfig.single('image'), (req: Request, res: Response): void => { ... })

app.post('/api/resize', multerConfig.single('image'), async (req: Request, res: Response): Promise<void> => { ... })

app.get('/resized/:filename', async (req: Request, res: Response): Promise<void> => { ... })

app.use((err: Error, req: Request, res: Response, next: NextFunction): void => { ... })

app.listen(PORT, (): void => { ... })

########################################################################################
########################################################################################

frontend/style.css: 
____________________________________
Old: 
#gallery img {
    margin: 10px;
    max-width: 150px; /* Reduced width for thumbnails */
    max-height: 150px; /* Reduced height for thumbnails */
    border-radius: 8px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    cursor: pointer;
}

#gallery img.selected {
    border: 2px solid #007bff;
    box-shadow: 0 0 10px rgba(0, 123, 255, 0.5);
}


____________________________________
New:

 #gallery img {
    margin: 10px;
    max-width: 150px; /* Reduced width for thumbnails */
    max-height: 150px; /* Reduced height for thumbnails */
    border-radius: 8px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
}

#gallery img.selected {
    border: 2px solid #007bff;
    box-shadow: 0 0 10px rgba(0, 123, 255, 0.5);
}
____________________________________

New Addition:
 
.thumbnail {
    cursor: pointer;
    border: 2px solid transparent;
    margin: 5px;
}

.thumbnail.selected {
    border-color: blue;
}


#########################################################################################
#########################################################################################

frontend/script.js
____________________________________
Old: 

formData.append('filename', selectedImage);
____________________________________
New: 

if (selectedImageBlob) {
    formData.append('image', selectedImageBlob, selectedImageFilename);
} else {
    formData.append('image', resizeImageInput.files[0]);
}

____________________________________
Old: 


addImageToGallery(data.file.filename);

// Directly calls addImageToGallery with data.file.filename.

____________________________________
New: 

addImageToGallery(data.file.filename);

//The same, but the addImageToGallery method now has an additional classList.add('thumbnail') for images
____________________________________
Old: 

selectedImage = filename;

const images = document.querySelectorAll('#gallery img');

images.forEach((img) => img.classList.remove('selected'));

const selectedImg = Array.from(images).find((img) => img.src.includes(encodeURIComponent(filename)));

selectedImg.classList.add('selected');
___________________________________
New: 

selectedImageFilename = filename;

const images = document.querySelectorAll('#gallery img');
images.forEach((img) => img.classList.remove('selected'));
const selectedImg = Array.from(images).find((img) => img.src.includes(encodeURIComponent(filename)));
if (selectedImg) {
    selectedImg.classList.add('selected');
}

fetch(`http://localhost:3000/resized/${encodeURIComponent(filename)}`)
    .then(response => response.blob())
    .then(blob => {
        selectedImageBlob = blob;
        const file = new File([blob], filename, { type: 'image/jpeg' });
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        resizeImageInput.files = dataTransfer.files;
    })
    .catch(error => console.error('Error fetching image blob:', error));
___________________________________

Old: 

const resizeImageInput = document.querySelector('#resizeImageInput');

___________________________________

New: 

const resizeImageInput = document.querySelector('#resizeImageInput');

const selectedImageInput = document.querySelector('#selectedImage');

##########################################################################################
##########################################################################################
frontend/index.html: 
____________________________________

New Addition: 

<input type="hidden" id="selectedImage" name="selectedImage"> <!-- Hidden input for selected image -->

